@name Telekinesis by Franco22hu
@inputs
@outputs PropCount Time OwnerDir LaunchedProp:entity PropArray:array
@persist ShootPrev LaunchedTarget:vector
# Declare constants
@persist ScanInterval:number CircleSpeed:number CircleDistance:number PropModel:string

# First run 
if (first()) {
    
    # Set run on each ticks
    runOnTick(1)
    
    # -----------------------
    #       CONSTANTS
    # -----------------------
    ScanInterval = 1000 # ms
    CircleSpeed = 30
    CircleDistance = 25
    PropModel = "models/props_c17/oildrum001_explosive.mdl"
}

# Set timer for scan
timer("scan", ScanInterval)

# Scan for new props on trigger
if (clk("scan")) {
    
    # Find props of specified model, type and range
    findInSphere(owner():pos(), 3000) # Scan distance
    findClipToClass("prop_physics")
    findAllowPlayerProps(owner())
    findClipToModel(PropModel)
    TempArray = findToArray()
    
    # Iterate through temporary array
    for (I = 1, TempArray:count()) {
        
        # Break scanning if it reaches a limit of ops
        if (opcounter() > maxquota() * 0.7) { break }
        
        TempProp = TempArray[I, entity]
        if (TempProp == noentity()) { continue }
        
        # Check if props contain this one
        Contains = 0
        for (J = 1, PropArray:count()) {
            if (PropArray[J, entity] == TempProp) { Contains = 1, break}
        }
        
        # Add to props if not added yet
        if (!Contains) {
            PropArray:insertEntity(PropArray:count(), TempProp)
        }
    }
}

# Get owner direction angle
OwnerDir = (owner():pos() - owner():aimPos()):toAngle():yaw()

# Shoot
Shoot = owner():weapon():type() == "weapon_crowbar" & owner():keyAttack1()
if (Shoot & !ShootPrev & !LaunchedProp) {
    
    # Find closest prop angle to owner angle
    ClosestI = 0
    ClosestVal = 999
    for(I = 1, PropCount) {
        Prop = PropArray[I, entity]
        PropDir = (owner():pos() - Prop:pos()):toAngle():yaw()
        Val = abs(OwnerDir - PropDir)
        if (Val < ClosestVal) { ClosestI = I, ClosestVal = Val}
    }
    
    # Set launched prop
    LaunchedProp = PropArray[ClosestI, entity]
    LaunchedTarget = owner():aimPos()
}

# Save last shooting input state
ShootPrev = Shoot

# Get a forever changing variable from time
Time = (systime() * CircleSpeed) % 360

# Push launched prop
LaunchedProp:applyForce((LaunchedTarget - LaunchedProp:pos()) * LaunchedProp:mass() * 500)

# Iterate props and move each
PropCount = PropArray:count()
for(I = 1, PropCount) {
    Prop = PropArray[I, entity]
    
    # Remove null entities
    if (Prop == noentity()) { 
        PropArray:remove(I)
        continue
    }
    # Ignore launched prop
    if (Prop == LaunchedProp) { continue }
    
    # Rotate props
    Val = Time + ((I-1) * 360 / PropCount)
    TargetPos = owner():pos() + vec(0, 0, 200)
    TargetPos += vec(
        sin(Val) * PropCount * CircleDistance, 
        cos(Val) * PropCount * CircleDistance, 
        0
    )
    Prop:applyForce((TargetPos - Prop:pos() - Prop:vel()) * Prop:mass())
}
